# -*- coding: utf-8 -*-
"""Modelling Orbit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HyT_6c7qA62TNLXcnLOrbf6GQpce7eJ5
"""

!pip install rebound

import sys
import numpy as np
import matplotlib . pyplot as plt
import rebound
import pandas as pd
# create a sim object
sim = rebound . Simulation ()

df = pd.read_excel('/content/plutinos-planets-24598005-Kep-Car.xlsx', sheet_name='planets-24598005-Kep-Car')
df

import rebound
sim = rebound.Simulation()
sim.add(m=1)
sim.add(m=0.1, e=0.041, a=0.4, inc=0.2, f=0.43, Omega=0.82, omega=2.98)
sim.add(m=1e-3, e=0.24, a=1.0, pomega=2.14)
sim.add(m=1e-3, e=0.24, a=1.5, omega=1.14, l=2.1)
sim.add(a=-2.7, e=1.4, f=-1.5,omega=-0.7) # hyperbolic orbit

sim = rebound.Simulation()
sim.add(m=1)

def sim_add(e,a,inc,M,Omega,omega):
  sim_add = sim.add(e=df['e'][i], a=df['a'][i], inc=df['i'][i], M=df['ma'][i], Omega=df['om'][i], omega=df['w'][i])
  return sim_add

sim = rebound.Simulation()
sim.add(m=1)
for i in range (len(df)):
  sim_add(df['e'][i],df['a'][i],df['i'][i],df['ma'][i],df['om'][i],df['w'][i])

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
fig, ax = rebound.OrbitPlot(sim)

fig, ax = rebound.OrbitPlot(sim, orbit_type="solid", lw=2)

fig, ax = rebound.OrbitPlot(sim, orbit_type=None)

fig, ax = rebound.OrbitPlot(sim, fancy=True, color=True, lw=2)

from IPython.display import display, clear_output
import matplotlib.pyplot as plt
sim.move_to_com()
for i in range(3):
    sim.integrate(sim.t+0.31)
    fig, ax = rebound.OrbitPlot(sim,color=True,unitlabel="[AU]",xlim=[-2,2.],ylim=[-2,2.])
    display(fig)
    plt.close(fig)
    clear_output(wait=True)

fig = rebound.OrbitPlot(sim,slices=0.5,xlim=[-2.,2],ylim=[-2.,2])

sim = rebound.Simulation()
sim.add(m=1.) #Star A
sim.add(m=1., a=1.) #Star B
sim.add(a=2.) #Planet ABb
sim.add(a=0.2, primary=sim.particles[1]) #Bb,
sim.move_to_com()
fig = rebound.OrbitPlot(sim)

import matplotlib.pyplot as plt
import numpy as np
fig, ax = plt.subplots(figsize=(5,5))
ax.set_aspect("equal")
ps = sim.particles

# manually set plot boundaries
lim = 2.3
ax.set_xlim([-lim, lim])
ax.set_ylim([-lim, lim])

# plot the stars and planets with separate symbols
for star in ps[:2]:
    ax.scatter(star.x, star.y, s=35, marker='*', facecolor='black', zorder=3)

for planet in ps[2:]:
    ax.scatter(planet.x, planet.y, s=10, facecolor='black', zorder=3)

# Now individually plot orbit trails with appropriate orbit

from rebound.plotting import fading_line

ABb = ps[2] # circumbinary planet, use default jacobi coordinates
o = np.array(ABb.sample_orbit())
lc = fading_line(o[:,0], o[:,1])
ax.add_collection(lc)

Bb = ps[3] # planet in orbit around B, assign it as primary
o = np.array(Bb.sample_orbit(primary=ps[1]))
lc = fading_line(o[:,0], o[:,1])
ax.add_collection(lc);