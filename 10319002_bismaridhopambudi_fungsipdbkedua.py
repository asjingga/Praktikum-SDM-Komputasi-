# -*- coding: utf-8 -*-
"""10319002_BismaRidhoPambudi_FungsiPDBKedua.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kA3DzhPEF2b7f6S0-t1khz88xTojQeDO
"""

from math import *

"""##### Persamaan diferensial yang diinput

Untuk percobaan, coba yang pertama, kemudian setelah sukses coba yang kedua:
1. $f(x,y) = x + y$
2. $f(x,y) = 3 x^2 e^{y^3}$
"""

def f(x, y):
    '''
    Dua fungsi untuk dicoba bergantian:
    1. x + y
    2. 3*(x**2)*exp(y**3)
    '''
    return 3 * (x**2) * exp(y**3)

"""##### Metode Runge-Kutta klasik (4 simpul)

Metode di bawah ini mungkin saja menghadapi karaktersitik PDB dengan profil fungsi yang 'baik' atau mungkin juga profil yang 'ketat' sehingga sangat mempengaruhi pemilihan stepsize $h$ atau bahkan mengharuskan adaptasi perubahan $h$ segera setelah ditemukan potensi divergen (misalkan berdasarkan perambatan galat yang dipantau melebihi toleransi yang diinginkan).

##### Tugas Anda
Silakan modifikasi `rk4` (setelah backup versi sukses yang sebelumnya) agar dapat adaptif pada perambatan galat yang berbahaya.
Tuliskan komentar dan interpretasi di beberapa *cell* di bawah sesuai dengan kebutuhan. Plot solusi tidak *mandatory*.
"""

def rk4(x0, y0, xn, n):
    '''
    Diasumsikan PDB disuplai dengan nilai-nilai awal x0 dan y0,
    batas perhitungan variabel x, yaitu xn, serta jumlah langkah
    komputasi n
    '''

    # stepsize h
    h = (xn - x0)/n

    for i in range(n):
        # hitung nilai di keempat simpul
        k1 = h * f(x0, y0)
        k2 = h * f(x0 + h/2, y0 + (k1/2))
        k3 = h * f(x0 + h/2, y0 + (k2/2))
        k4 = h * f(x0 + h, y0 + k3)

        # update nilai-nilai baru setelah 1 stepsize, yaitu xn, yn
        # update nilai galat juga dapat disimpan (di awal sekali, galat tidak terdefinisi)
        xn = x0 + h
        yn = y0 + ((k1 + 2*k2 + 2*k3 + k4)/6)
        ep = (abs((yn-y0)/y0)*100)

        # update nilai perolehan dapat ditampilkan
        print('%.6f\t%.6f\t%.6f' % (xn, yn, ep))

        # menuju update berikutnya: x0 dan y0 'mencaplok' xn dan yn
        x0 = xn
        y0 = yn
    return 0

def main():
    '''
    Masukkan nilai-nilai awal yang wajib ada agar selesaian PDB dapat diperoleh, yaitu
    titik awal (x0, y0), titik akhir untuk x, yaitu x = xn, dan jumlah step komputasi
    Ambil contoh x0 = 0, xn = 1, y0 = 1, step silakan pilih manasuka
    '''
    x0   = float(input('Masukkan nilai pilihan untuk x0 ='))
    xn   = float(input('Masukkan nilai pilihan untuk xn ='))
    y0   = float(input('Masukkan nilai pilihan untuk y0 ='))
    step = int(input('Masukkan step komputasi yang diinginkan = '))

    # header untuk tabulasi perolehan komputasi
    print('xn\t\tyn\t\tep (%)')

    # panggil metode Runge-Kutta
    rk4(x0, y0, xn, step)
    return 0

if __name__ == '__main__':
    main()

"""Catatan pribadi, math range error terjadi karena besarnya angka yang dihasilkan dari fungsi. Coba cari bagaimana cara mengatasinya kedepannya"""