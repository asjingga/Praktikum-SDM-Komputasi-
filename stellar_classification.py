# -*- coding: utf-8 -*-
"""stellar-classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rh_2mFG4bZY_2tO4prO4pfjUQ25eZuFX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""<a id='1'></a><br>
# Load and Check Data
"""

df= pd.read_csv("/content/star_classification.csv")

df.head()

df.info()

df["class"].value_counts()

df["class"]=[0 if i == "GALAXY" else 1 if i == "STAR" else 2 for i in df["class"]]

ax=sns.countplot(x=df["class"]);
ax.bar_label(ax.containers[0]);

"""<a id='2'></a><br>
# Deteksi Outliers
"""

from sklearn.neighbors import LocalOutlierFactor
out = LocalOutlierFactor()
y_pred = out.fit_predict(df)

x_score = out.negative_outlier_factor_
outlier_score = pd.DataFrame()
outlier_score["score"] = x_score

#threshold
threshold2 = -1.5
filter2 = outlier_score["score"] < threshold2
outlier = outlier_score[filter2].index.tolist()

len(outlier)

df.drop(outlier, inplace=True)

"""<a id='3'></a><br>
# Seleksi Fitur yang Berpengaruh
"""

import seaborn as sns
f,ax = plt.subplots(figsize=(12,8))
sns.heatmap(df.corr(), cmap="PuBu", annot=True, linewidths=0.5, fmt= '.2f',ax=ax)
plt.show()

corr = df.corr()

corr["class"].sort_values()

df = df.drop(['obj_ID','alpha','delta','run_ID','rerun_ID','cam_col','field_ID','fiber_ID'], axis = 1)

"""<a id='4'></a><br>
# Mengatasi Data yang Imbalance
"""

from imblearn.over_sampling import SMOTE
from collections import Counter

x = df.drop(['class'], axis = 1)
y = df.loc[:,'class'].values

sm = SMOTE(random_state=42)
print('Original dataset shape %s' % Counter(y))
x, y = sm.fit_resample(x, y)
print('Resampled dataset shape %s' % Counter(y))

"""<a id='5'></a><br>
# Standarisasi Skala
"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(x)
x = scaler.transform(x)

from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, ConfusionMatrixDisplay

"""<a id='7'></a><br>
# Train / Test Split
"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33, random_state = 42)

"""<a id='9'></a><br>
## Klasifikasi SVM
"""

svm_klasifikasi = svm.SVC(kernel='rbf', C=1, random_state=0)
svm_klasifikasi.fit(x_train,y_train)
predictedS = svm_klasifikasi.predict(x_test)
score = svm_klasifikasi.score(x_test, y_test)
svm_score_ = np.mean(score)
print('Accuracy : %.3f' % (svm_score_))

classes = ['GALAXY','STAR','QSO']

"""<a id='10'></a><br>
### Matrix Confusion
"""

svm_cm = confusion_matrix(predictedS,y_test)
disp = ConfusionMatrixDisplay(confusion_matrix=svm_cm)
disp.plot()
plt.show()

"""<a id='11'></a><br>
### Classification Report
"""

print(classification_report(y_test, predicted))

"""<a id='14'></a><br>
## Klasifikasi RF
"""

r_forest = RandomForestClassifier()
r_forest.fit(x_train,y_train)
predicted = r_forest.predict(x_test)
score = r_forest.score(x_test, y_test)
rf_score_ = np.mean(score)

print('Accuracy : %.3f' % (rf_score_))

"""<a id='15'></a><br>
### Matriks Confusion
"""

RF_cm = confusion_matrix(predicted,y_test)
disp = ConfusionMatrixDisplay(confusion_matrix=RF_cm)
disp.plot()
plt.show()

"""<a id='16'></a><br>
### Classification Report
"""

print(classification_report(y_test, predicted))