# -*- coding: utf-8 -*-
"""SDM Updated  (FILLNA).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B3cWP64h7py2R9-CgBypQ3dKNPW4lkps
"""

import numpy as np
import pandas as pd
# Install Sklearn
import sklearn.preprocessing as sk

pandasData = pd.read_csv('SHARP_SDO_Data_20112015.csv', sep=',')   # using pandas, please pay necessary attention to *sep* punctuation symbol
df = pd.DataFrame(data=pandasData)

# Menghitung timedelta dengan referensi Unix Epoch Time 1970-01-01
df['T_REC'] = pd.to_datetime(df['T_REC'], format='%Y.%m.%d_%H:%M:%S_TAI') - pd.Timestamp('1970-01-01')

# Mengubah timedelta dengan satuan detik ke dalam float
df['T_REC'] = df['T_REC'].dt.total_seconds().astype(float)
df

# Memastikan tidak ada NaN
df.isna().sum()

# Ganti Infinity dengan NaN
df.replace([np.inf, -np.inf], np.nan, inplace=True)
# Ganti 0 dengan NaN
df = df.replace(0, np.nan)
# Mengganti tiap kolom NaN dengan Mean
df.fillna(df.mean(), inplace=True)
df

# Memastikan tidak ada NaN
df.isna().sum()

# Memisahkan kolom CLASS
classes = df['CLASS']
df = df.drop(columns=['CLASS'])
# Menghapus kolom Unnamed
df = df.drop(df.columns[0], axis=1)
df

# Memastikan shape data
df.shape

# Binarization
transformerP = sk.Binarizer(threshold=0.5).transform(df)
transformerP

# Mean
df.mean(axis=0)

# Scaling
df_scaled = sk.scale(df)
df_scaled

# Every Feature Centered on Zero
df_scaled.mean(axis=0)

# Standard Deviasi 1
df_scaled.std(axis=0)

df.std(axis=0)

# Min Max Scaler
# min = 0, max = 100
df_minmax_Scaler = sk.MinMaxScaler(feature_range=(0,100))
df_minmax_scaled = df_minmax_Scaler.fit_transform(df)
df_minmax_scaled

# Normalisasi
df_l1 = sk.normalize(df, norm = 'l1')
df_l1

#L1
abs(df_l1[0][0]) + abs(df_l1[0][1]) + abs(df_l1[0][2])

abs(df_l1[1][0]) + abs(df_l1[1][1]) + abs(df_l1[1][2])

abs(df_l1[2][0]) + abs(df_l1[2][1]) + abs(df_l1[2][2])

abs(df_l1[3][0]) + abs(df_l1[3][1]) + abs(df_l1[3][2])

# L2 (least Square)
df_l2 = sk.normalize(df, norm = 'l2')
df_l2

df_l2[0][0]*df_l2[0][0] + df_l2[0][1]*df_l2[0][1] + df_l2[0][2]*df_l2[0][2]

df_l2[1][0]*df_l2[1][0] + df_l2[1][1]*df_l2[1][1] + df_l2[1][2]*df_l2[1][2]

df_l2[2][0]*df_l2[2][0] + df_l2[2][1]*df_l2[2][1] + df_l2[2][2]*df_l2[2][2]

df_l2[3][0]*df_l2[3][0] + df_l2[3][1]*df_l2[3][1] + df_l2[3][2]*df_l2[3][2]

# Robust Scaling
df_robust = sk.RobustScaler().fit(df).transform(df)
df_robust

# Mengembalikan kolom Class
df['CLASS'] = classes[df.index]
df

# Data Set Bersih
df.to_csv('SHARP_SDO_Data_20112015_Fill_DataBersih.csv', index=False)

## Plot Plotan
import matplotlib.pyplot as plt

def plot(x, y):
    c = y
    scatterplot = plt.scatter(x, y,c=c,cmap='cool')
    plt.xlabel(x.name)
    plt.ylabel(y.name)
    plt.colorbar(scatterplot)
    plt.title(f'Plot {x.name} terhadap {y.name}')
    plt.show()

def plothistogram(x):
    plt.hist(x)
    plt.xlim(0,x.max())
    plt.xlabel(x.name)
    plt.ylabel('Frekuensi')
    plt.title(f'Plot Histogram {x.name}')
    plt.show()

def plotpolar(x,y):
    fig = plt.figure(figsize=(6, 6))
    plt.polar(x,y)
    plt.title(f'Plot Polar {x.name} terhadap {y.name}')
    plt.show()

# Plot T_REC terhadap SHRGT45
x = df['T_REC']
y = df['MEANGBT']

plot(x,y)

# Plot Histogram MEANGBT
z = df['MEANGBT']
plothistogram(z)

# Plot Polar ABSNJZH terhadap TOTPOT
a = df['ABSNJZH']
b = df['TOTPOT']
t_min = pd.Timestamp('2011-02-12T00:00:00.000')
timetheta = ((pd.to_datetime(df['T_REC']) - t_min) / np.timedelta64(1, 'D')) * 2 * np.pi
plotpolar(x,b)

# Ingin Mengisi Blank dengan No Flare
df['CLASS'].fillna("No Flare Detected", inplace=True)
df

# Data Set Bersih Termasuk Class
df.to_csv('SHARP_SDO_Data_20112015_Fill_DataBersih_Class.csv', index=False)

# Memastikan tidak ada Duplicate
df.duplicated().sum()

# Menghilangkan duplicates
df.drop_duplicates(inplace=True)
df

print("NaN Value")
print(df.isna().sum())
print("")
print("Duplikasi")
print(df.duplicated().sum())
print("")
print("Ukuran Shape")
print(df.shape)

# Data Set Bersih Tanpa Duplikat
df.to_csv('SHARP_SDO_Data_20112015_Fill_Data Bersih_Without Duplicates.csv', index=False)

x = df['T_REC']
y = df['CLASS']

import seaborn as sns
import matplotlib.pyplot as plt

# Set up the figure
sns.set(style="whitegrid")
fig, ax = plt.subplots(figsize=(10, 6))

# Plot the data
sns.scatterplot(x=x, y=y, data=df, hue=y, s=100, palette="husl", alpha=0.8)

# Set the title and axis labels
plt.title("Solar Flare Classification", fontsize=16, fontweight='bold')
plt.xlabel("T_REC", fontsize=14, fontweight='bold')
plt.ylabel("Class", fontsize=14, fontweight='bold')

# Customize the legend
handles, labels = ax.get_legend_handles_labels()
ax.legend(handles=handles[1:], labels=labels[1:], title="Solar Flare Classification", bbox_to_anchor=(1.02, 1), loc='upper left', fontsize=12)

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='CLASS', data=df[df['CLASS']=='No Flare Detected'])
plt.show()

